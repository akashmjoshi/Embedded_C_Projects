#include "msp430x26x.h"
#include "DataTypes.h"
#include "lcd.h"
#include "display.h"




display_start(int mode)
{

switch(mode)
{
	case 1:
				Send_str("   Ambetronics  ", 0);       		 
		    	Send_str("    Engineers   ", 16);
		    	Send_str("     Pvt Ltd    ", 32);				 
		    	Send_str("  Mumbai , India", 48);
		break;

	case 2:
				Send_str("    Universal   ", 0);
		    	Send_str("   Data Logger  ", 16);
		    	Send_str("    8i/p  CHNL  ", 32);
		    	Send_str("   VERSION 1.0  ", 48);       
		break;
		
	case 3:
				Send_str("Please Wait Till", 0);
		    	Send_str("  Warm-Up Time  ", 16);
		    	Send_str("    Completes   ", 32);
		    	Send_str("                ", 48);       
		break;
		
	
}		
}

display_chn1(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 1   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 1   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 1   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 1   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 1   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 1   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 1   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}

display_chn2(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 2   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 2   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 2   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 2   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 2   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 2   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 2   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn3(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 3   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 3   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 3   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 3   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 3   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 3   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 3   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn4(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 4   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 4   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 4   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 4   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 4   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 4   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 4   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn5(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 5   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 5   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 5   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 5   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 5   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 5   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 5   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn6(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 6   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 6   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 6   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 6   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 6   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 6   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 6   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn7(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 7   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 7   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 7   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 7   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 7   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 7   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 7   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}
display_chn8(int mode)
{

switch(mode)
{
	case 1:
				Send_str("    Channel 8   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 2:
				Send_str("    Channel 8   ", 0);
		    	Send_str("    RTD input   ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 3:
				Send_str("    Channel 8   ", 0);
		    	Send_str("  Current input ", 16);
		       	Send_str("             mA ", 32);       
	break;
	case 4:
				Send_str("    Channel 8   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("        Celcius ", 32);       
	break;
	case 5:
				Send_str("    Channel 8   ", 0);
		    	Send_str("  Thermocouple  ", 16);
		       	Send_str("       Farenheit", 32);       
	break;
	case 6:
				Send_str("    Channel 8   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             mV ", 32);       
	break;
	case 7:
				Send_str("    Channel 8   ", 0);
		    	Send_str("  Voltage input ", 16);
		       	Send_str("             V  ", 32);       
	break;
		
}
}


display_rtc_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("   RTC Setting  ", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("  RTC Parameter ", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("  RTC Parameter ", 0);
		    	Send_str(" Date/Mnth/Year ", 16);
		    	Send_str("      /  /      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("  RTC Parameter ", 0);
		    	Send_str(" Hour:Mins:Secs ", 16);
		    	Send_str("      :  :      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str("  RTC Parameter ", 0);
		    	Send_str("    Update RTC  ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str("  RTC Parameter ", 0);
		    	Send_str("    Update RTC  ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
	
	}
		
	
}

display_enabl_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("Chnl Enabl/Disbl", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Enabl/Disbl Mode", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Enabl/Disbl Mode", 0);
		    	Send_str("    Chnl:0      ", 16);
		    	Send_str("     Enable     ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Enabl/Disbl Mode", 0);
		    	Send_str("    Chnl:0      ", 16);
		    	Send_str("     Disable    ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		
		case 6:
				Send_str("Enabl/Disbl Mode", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str("Enabl/Disbl Mode", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
	
	
	}
		
	
}

display_alarm_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("  Alarm Setting ", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str(" Alarm Parameter", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str(" Alarm Parameter", 0);
		    	Send_str("    Chnl:0      ", 16);
		    	Send_str("Use INC & Shift ", 32);       
		    	Send_str("       key      ", 48);       
		break;
		case 5:
				Send_str(" Alarm Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str(" Alarm Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("   Use Alarm1   ", 16);
		    	Send_str("      Yes       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 8:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("   Use Alarm1   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 9:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Assgn AL1 to PV", 16);
		    	Send_str("      Yes       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 10:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Assgn AL1 to PV", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 11:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("     Set AL1    ", 16);
		    	Send_str("                ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 12:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("     Set HY1    ", 16);
		    	Send_str("                ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 13:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("  Alarm1 Logic  ", 16);
		    	Send_str("       High     ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 14:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("  Alarm1 Logic  ", 16);
		    	Send_str("       Low      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 15:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Alarm1 Latching", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 16:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Alarm1 Latching", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 17:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("   Use Alarm2   ", 16);
		    	Send_str("      Yes       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 18:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("   Use Alarm2   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 19:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Assgn AL2 to PV", 16);
		    	Send_str("      Yes       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 20:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Assgn AL2 to PV", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 21:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("     Set AL2    ", 16);
		    	Send_str("                ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 22:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("     Set HY2    ", 16);
		    	Send_str("                ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 23:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("  Alarm2 Logic  ", 16);
		    	Send_str("       High     ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 24:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("  Alarm2 Logic  ", 16);
		    	Send_str("       Low      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 25:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Alarm2 Latching", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 26:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Alarm2 Latching", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 27:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Exit Alarm Set ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 28:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Exit Alarm Set ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
						
		}
}


display_input_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("   Input type   ", 0);
		    	Send_str("     Settings   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str(" Input Parameter", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("   4 to 20 mA   ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 5:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("   0 to 20 mA   ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Input type RTD ", 16);
		    	Send_str("      PT100     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str(" Input type RTD ", 16);
		    	Send_str("      PT1000    ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 8:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     J type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 9:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     K type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 10:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     R type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 11:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     S type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 12:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     T type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 13:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     E type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 14:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     B type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 15:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("     N type     ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 16:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("    0 to 1 V    ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 17:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("    0 to 5 V    ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		case 18:
				Send_str(" Channel 0  Set ", 0);
		    	Send_str("                ", 16);
		    	Send_str("    0 to 10 V   ", 32);       
				Send_str("Use INC & Shift ", 48);             
		break;
		
		case 19:
				Send_str(" Input Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 20:
				Send_str(" Input Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
	}
}

display_scan_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("Scan Intrval Set", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Scan Intrval Set", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Scan Intrval Set", 0);
		    	Send_str("    Scan Time   ", 16);
		    	Send_str("   001 Seconds  ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Scan Intrval Set", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str("Scan Intrval Set", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;

	}
	
}

display_amb_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("Ambient Mode Set", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Ambient Mode Set", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Ambient Mode Set", 0);
		    	Send_str("  Ambient Temp  ", 16);
		    	Send_str("   000 Celcius  ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Ambient Mode Set", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str("Ambient Mode Set", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;

	}
	
}


display_modbus_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str(" Modbus Setting ", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Modbus Parameter", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Modbus Parameter", 0);
		    	Send_str("   Station ID   ", 16);
		    	Send_str("       000      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Modbus Parameter", 0);
		    	Send_str("Baud Rate in BPS", 16);
		    	Send_str("      0000      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;

		case 6:
				Send_str("Modbus Parameter", 0);
		    	Send_str("   Set Parity   ", 16);
		    	Send_str("      Even      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 7:
				Send_str("Modbus Parameter", 0);
		    	Send_str("   Set Parity   ", 16);
		    	Send_str("       Odd      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 8:
				Send_str("Modbus Parameter", 0);
		    	Send_str("  Set Stopbits  ", 16);
		    	Send_str("       One      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 9:
				Send_str("Modbus Parameter", 0);
		    	Send_str("  Set Stopbits  ", 16);
		    	Send_str("       Two      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 10:
				Send_str("Modbus Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 11:
				Send_str("Modbus Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;

	}
	
}


display_log_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("   Log Setting  ", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("  Log Parameter ", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("  Log Parameter ", 0);
		    	Send_str(" Hour:Mins:Secs ", 16);
		    	Send_str("    00:00:01    ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 5:
				Send_str("  Log Parameter ", 0);
		    	Send_str("  Set Log Mode  ", 16);
		    	Send_str("   Scrolling    ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str("  Log Parameter ", 0);
		    	Send_str("Set Log trigger ", 16);
		    	Send_str("  Continous Log ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str("  Log Parameter ", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 8:
				Send_str("  Log Parameter ", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 9:
				Send_str("  Log Parameter ", 0);
		    	Send_str("Set Log trigger ", 16);
		    	Send_str("Time trigger log", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 10:
				Send_str(" Set Start year ", 0);
		    	Send_str(" Date/Mnth/Year ", 16);
		    	Send_str("      /  /      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 11:
				Send_str(" Set Start time ", 0);
		    	Send_str(" Hour:Mins:Secs ", 16);
		    	Send_str("      :  :      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 12:
				Send_str("  Set Stop year ", 0);
		    	Send_str(" Date/Mnth/Year ", 16);
		    	Send_str("      /  /      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 13:
				Send_str("  Set Stop time ", 0);
		    	Send_str(" Hour:Mins:Secs ", 16);
		    	Send_str("      :  :      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
	    case 14:
				Send_str("  Log Parameter ", 0);
		    	Send_str("Set Log trigger ", 16);
		    	Send_str("  Key press Log ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 15:
				Send_str("  log Parameter ", 0);
		    	Send_str(" key press delay", 16);
		    	Send_str("    001 Minutes ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
	
	}
		
}

display_mem_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str(" Memory Setting ", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Memory Parameter", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Memory Parameter", 0);
		    	Send_str("   Memory Used  ", 16);
		    	Send_str("       <   %Full", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Memory Parameter", 0);
		    	Send_str("  Clear Memory? ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 6:
				Send_str("Memory Parameter", 0);
		    	Send_str("  Clear Memory? ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 7:
				Send_str("Memory Parameter", 0);
		    	Send_str("  Are you sure? ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 8:
				Send_str("Memory Parameter", 0);
		    	Send_str("  Are you sure? ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 9:
				Send_str("Memory Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 10:
				Send_str("Memory Parameter", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
	
	}
		
	
}

display_downld_menu(int mode)
{
	switch(mode)
	{
		case 1:
				Send_str("Download Setting", 0);
		    	Send_str("    Parameter   ", 16);
		    	Send_str("     To Enter   ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str(" Enter Password ", 0);
		    	Send_str("       0000     ", 16);
		    	Send_str(" Use INC & Shift", 32);
		    	Send_str("  key to select ", 48);       
		break;
		case 3:
				Send_str("Download Paramtr", 0);
		    	Send_str("   To continue  ", 16);
		    	Send_str(" Press Set/Next ", 32);
		    	Send_str("       key      ", 48);       
		break;
		case 4:
				Send_str("Download Paramtr", 0);
		    	Send_str("   Station ID   ", 16);
		    	Send_str("       000      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 5:
				Send_str("Download Paramtr", 0);
		    	Send_str("  Select option ", 16);
		    	Send_str("  Data Download ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 6:
				Send_str("Download Paramtr", 0);
		    	Send_str("  Select option ", 16);
		    	Send_str("  Device Config ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 7:
				Send_str("Download Paramtr", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 8:
				Send_str("Download Paramtr", 0);
		    	Send_str("    Exit Menu   ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 9:
				Send_str("Download Paramtr", 0);
		    	Send_str(" Download option", 16);
		    	Send_str("All data at once", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 10:
				Send_str("Download Paramtr", 0);
		    	Send_str(" Download option", 16);
		    	Send_str("  Data in batch ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 11:
				Send_str("Download Paramtr", 0);
		    	Send_str("Start downloadng", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 12:
				Send_str("Download Paramtr", 0);
		    	Send_str("Start downloadng", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 13:
				Send_str("   Waiting for  ", 0);
		    	Send_str("     download   ", 16);
		    	Send_str("     command    ", 32);
		    	Send_str("                ", 48);       
		break;
		case 14:
				Send_str("Please configure", 0);
		    	Send_str("      device    ", 16);
		    	Send_str("                ", 32);
		    	Send_str("                ", 48);       
		break;
		case 15:
				Send_str("Download Paramtr", 0);
		    	Send_str(" Set lower limit", 16);
		    	Send_str("      00001     ", 32);
		    	Send_str("Use INC & Shift ", 48);       
		break;
		case 16:
				Send_str("Download Paramtr", 0);
		    	Send_str(" Set upper limit", 16);
		    	Send_str("      00001     ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		
		}
	
}

display_exit(int mode)
{
switch(mode)
{
		case 1:
				Send_str("    Exit from   ", 0);
		    	Send_str("       Menu     ", 16);
		    	Send_str("                ", 32);
		    	Send_str("  Press INC Key ", 48);       
		break;
		case 2:
				Send_str("    Exit from   ", 0);
		    	Send_str("       Menu     ", 16);
		    	Send_str("       Yes      ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;
		case 3:
				Send_str("    Exit from   ", 0);
		    	Send_str("       Menu     ", 16);
		    	Send_str("       No       ", 32);
		    	Send_str("Use INC & Shift ", 48);             
		break;

}

}

wait_inc_set()
{
while(1)
{
if((P2IN & 0x01)==0)
break;
if((P2IN & 0x04)==0)
break;
}

}

wait_set()
{
while(1)
{
if((P2IN & 0x01)==0)
break;
}

}

wait_inc_set_shft()
{
while(1)
{
if((P2IN & 0x01)==0)
break;
if((P2IN & 0x02)==0)
break;
if((P2IN & 0x04)==0)
break;
}

}



operate_mode()
{
//int i=1;

up:

display_rtc_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_rtc_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_rtc_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_rtc_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_rtc_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	 
	 wait_inc_set_shft();
	   if((P2IN & 0x04)==0)
       {
	   }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   display_rtc_menu(6);
	   UpdateLcd();
	   delay_ms(1080);
	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	 }
	 
	}
	}
}

else if((P2IN & 0x01)==0)
display_enabl_menu(1);
UpdateLcd();
delay_ms(1080);


wait_inc_set();

if((P2IN & 0x04)==0)
{
display_enabl_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_enabl_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_enabl_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_enabl_menu(6);
	 UpdateLcd();
	 delay_ms(1080);
	   	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	}
	}
}

else if((P2IN & 0x01)==0)
display_alarm_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_alarm_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_alarm_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_alarm_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_alarm_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	   	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	}
	}
}


else if((P2IN & 0x01)==0)
display_input_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_input_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_input_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_input_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_input_menu(19);
	 UpdateLcd();
	 delay_ms(1080);
	   	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	}
	}
}


else if((P2IN & 0x01)==0)
display_scan_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_scan_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_scan_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_scan_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_scan_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	   	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	}
	}
}


else if((P2IN & 0x01)==0)
display_amb_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_amb_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_amb_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_amb_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_amb_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	   	 
	   wait_inc_set_shft();
	   
	    if((P2IN & 0x04)==0)
        {
	    }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   goto up;
	   }
	   }
	}
	}
}


else if((P2IN & 0x01)==0)
display_modbus_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_modbus_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_modbus_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_modbus_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_modbus_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	 
	 wait_inc_set_shft();
	   if((P2IN & 0x04)==0)
       {
	   }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   display_modbus_menu(6);
	   UpdateLcd();
	   delay_ms(1080);
	 
	    wait_inc_set_shft();
	   
	     if((P2IN & 0x04)==0)
         {
	     }
	
         if((P2IN & 0x02)==0)
	     {
	     }
	
   	     if((P2IN & 0x01)==0)
	     {
	      display_modbus_menu(8);
	      UpdateLcd();
	      delay_ms(1080);
	 
	      wait_inc_set_shft();
	   
	      if((P2IN & 0x04)==0)
          {
	      }
	
         if((P2IN & 0x02)==0)
	     {
	     }
	
   	     if((P2IN & 0x01)==0)
	     {
	     	display_modbus_menu(10);
	        UpdateLcd();
	       delay_ms(1080);
	 
	       wait_inc_set_shft();
	   
	       if((P2IN & 0x04)==0)
           {
	       }
	
           if((P2IN & 0x02)==0)
	       {
	       }
	
      	   if((P2IN & 0x01)==0)
	       {
	       	goto up;
	       }  	
	     	
	     }	
	   
	   
	   }
	   }
	 }
	 
	}
	}
}




else if((P2IN & 0x01)==0)
display_log_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_log_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_log_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_log_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_log_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	 
	 wait_inc_set_shft();
	   if((P2IN & 0x04)==0)
       {
	   }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   display_log_menu(6);
	   UpdateLcd();
	   delay_ms(1080);
	 
	    wait_inc_set_shft();
	   
	     if((P2IN & 0x04)==0)
         {
	     }
	
         if((P2IN & 0x02)==0)
	     {
	     }
	
   	     if((P2IN & 0x01)==0)
	     {
	     	goto up;	   
	     }
	   }
	 }
	 
	}
	}
}



else if((P2IN & 0x01)==0)
display_mem_menu(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_mem_menu(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	}
	
	if((P2IN & 0x02)==0)
	{
	}
	
	if((P2IN & 0x01)==0)
	{
	display_mem_menu(3);
	UpdateLcd();
	delay_ms(1080);
	
	wait_set();
	
	if((P2IN & 0x01)==0)
	{
	 display_mem_menu(4);
	 UpdateLcd();
	 delay_ms(1080);
	
	 wait_inc_set_shft();
	 
	 if((P2IN & 0x04)==0)
     {
	 }
	
	 if((P2IN & 0x02)==0)
	 {
	 }
	
	 if((P2IN & 0x01)==0)
	 {
	 display_mem_menu(5);
	 UpdateLcd();
	 delay_ms(1080);
	 
	 wait_inc_set_shft();
	   if((P2IN & 0x04)==0)
       {
	   }
	
       if((P2IN & 0x02)==0)
	   {
	   }
	
   	   if((P2IN & 0x01)==0)
	   {
	   display_mem_menu(7);
	   UpdateLcd();
	   delay_ms(1080);
	 
	    wait_inc_set_shft();
	   
	     if((P2IN & 0x04)==0)
         {
	     }
	
         if((P2IN & 0x02)==0)
	     {
	     }
	
   	     if((P2IN & 0x01)==0)
	     {
	      display_mem_menu(9);
	      UpdateLcd();
	      delay_ms(1080);
	 
	      wait_inc_set_shft();
	   
	      if((P2IN & 0x04)==0)
          {
	      }
	
         if((P2IN & 0x02)==0)
	     {
	     }
	
   	     if((P2IN & 0x01)==0)
	     {
	     	goto up;
	     }  	
	   }
	   }
	 }
	 
	}
	}
}



else if((P2IN & 0x01)==0)
display_downld_menu(1);
UpdateLcd();
delay_ms(1080);

//while(!(P2IN & 0x04));

while((P2IN & 0x01) & (P2IN & 0x04));
if((P2IN & 0x04)==0)
{
while(!(P2IN & 0x01));

}
else if((P2IN & 0x01)==0)
display_exit(1);
UpdateLcd();
delay_ms(1080);

wait_inc_set();

if((P2IN & 0x04)==0)
{
display_exit(2);
UpdateLcd();
delay_ms(1080);

wait_inc_set_shft();

	if((P2IN & 0x04)==0)
	{
	
	}
	
	if((P2IN & 0x02)==0)
	{
		
	}
	
	if((P2IN & 0x01)==0)
	{
	goto up;	
	}
}

delay_ms(10);


}

