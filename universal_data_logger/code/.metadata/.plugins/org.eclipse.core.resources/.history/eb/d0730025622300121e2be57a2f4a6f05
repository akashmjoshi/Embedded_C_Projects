#include "msp430x26x.h"
#include "adc.h"
#include "shift_data.h"
#include "lcd.h"


unsigned char regreadads[15]; 
unsigned char regwriteads[15]; 
extern unsigned int chipselect_stat;
unsigned long adc_msg,dpdata;



void ADS1248AssertCS( int fAssert)
{
	
   if (fAssert)
    chip_sel(chipselect_stat & 0x7F);
	else
    chip_sel(chipselect_stat | 0x80);
}

int ADS1248SPIInit(void)
{ 
  P5SEL |= ADS1248_SCLK +  ADS1248_DIN + ADS1248_DOUT_DRDY; 

  
 //UCCKPL+
    UCB1CTL0 |= UCMST+UCSYNC+UCMSB;    				/* 3-pin SPI mode, 8-bit comms, MSP430 is Master */
  	UCB1CTL1 |= UCSSEL_2;                     				/* Use SMCLK as clock source */
  	UCB1BR0 = 0x02;                           				/* Set prescaling value for bit clock /2 */
  	UCB1BR1 = 0;                              
// 	UCA0MCTL = 0;                             				/* No modulation */
  	UCB1CTL1 &= ~UCSWRST;	                     			/* **Initialize USCI state machine** */
  	
// _BIS_SR(GIE);
  
  ADS1248AssertCS(0);  
  P2OUT |= ADS1248_START; //Start High
 
  delay_ms(10);
                         
   return 0;
        
}


int ADS1248CargaInicial(void)
{
  
  int i;
  int resultado;
  
  
   ADS1248SPIInit();
   ADS1248SendResetCommand();
   ADS1248Stop();
   ADS1248ReadRegister();
  
   for(i=0;i<15;i++)
   regwriteads[i] = regreadads[i];
  
   regwriteads[ADS1248_MUX0_REGISTER] = 0x07;
   regwriteads[ADS1248_VBIAS_REGISTER] = 0x00;
   regwriteads[ADS1248_MUX1_REGISTER] = 0x20;
   regwriteads[ADS1248_SYS0_REGISTER] = 0x00;
  
   ADS1248WriteRegister(ADS1248_MUX0_REGISTER , 4);
   delay_ms(10);
  
   regwriteads[ADS1248_IDAC0_REGISTER] = 0x06;  
   regwriteads[ADS1248_IDAC1_REGISTER] = 0x89;  
   ADS1248WriteRegister(ADS1248_IDAC0_REGISTER , 2);
   delay_ms(10);
  
   ADS1248ReadRegister();
   delay_ms(10);
  
   resultado = 0;
   
   for(i=0;i<7;i++)
  {
    if (regwriteads[i] != regreadads[i])
      resultado = 1;
  }
     for(i=11;i<15;i++)
  {
     if (regwriteads[i] != regreadads[i])
    resultado = 1;
  }
   
return resultado;
  
  
}


int ADS1248WriteRegister(int StartAddress, int NumRegs)
{
  int i;
  unsigned char dummy;
  unsigned char reg[15];
  
  for (i=0;i<NumRegs;++i)
  {
    reg[i] = regwriteads[StartAddress + i];
  }
  
  
  ADS1248Stop(); 
  
  ADS1248AssertCS(1); 
  delay_ms(60);
   
//  while(!(  UC1IFG & UCB1TXIFG));
  UCB1TXBUF= ADS1248_CMD_WREG + StartAddress;
  
  while(!(  UC1IFG & UCB1RXIFG));
  dummy=UCB1RXBUF;
//  while(!(  UC1IFG & UCB1TXIFG));
  UCB1TXBUF=NumRegs - 1;
  
  while(!(  UC1IFG & UCB1RXIFG));
  dummy=UCB1RXBUF;
  for (i=0;i<NumRegs;++i)
  {
  //  while(!(  UC1IFG & UCB1TXIFG));
    UCB1TXBUF=reg[i];
    while(!(  UC1IFG & UCB1RXIFG));
    dummy=UCB1RXBUF;
  }

  delay_ms(10);
                          
  ADS1248AssertCS(0); // CS goes high
  
  return 0;
  

}

void ADS1248ReadRegister()
{
  unsigned char dummy;
  unsigned char reg[15];
  int i;
  
  ADS1248Stop(); 
delay_ms(10);

   ADS1248AssertCS(0); // CS goes high
 delay_ms(20);
  ADS1248AssertCS(1); // CS goes low
delay_ms(60);

//  while(!(  UC1IFG & UCB1TXIFG));
  UCB1TXBUF=ADS1248_CMD_RREG;	// Command for register read
  while(!(  UC1IFG & UCB1RXIFG));
  dummy=UCB1RXBUF;
  

//  while(!(  UC1IFG & UCB1TXIFG));
  UCB1TXBUF=0x0E;		// Command for number of registers to read
  while(!(  UC1IFG & UCB1RXIFG));
  dummy=UCB1RXBUF;

  for (i=0; i<15; ++i) 
  {
    UCB1TXBUF=0xff;
    while(!(  UC1IFG & UCB1RXIFG));
    reg[i]=UCB1RXBUF;         
  }

   for(i=0;i<15;i++)
    regreadads[i] = reg[i];
  
  ADS1248AssertCS(0); // CS goes high
  
}


long ADS1248ReadData()
{
  char dummy;
  unsigned int data1, data2, data3;   
  long dato;
  
  // assert CS to start transfer
  ADS1248AssertCS(1); // CS goes low
  delay_ms(60);

  while(P2IN & ADS1248_DRDY);
  
//  while(!(  UC1IFG & UCB1TXIFG));
  UCB1TXBUF=ADS1248_CMD_RDATA;
  while(!(  UC1IFG & UCB1RXIFG));
  dummy=UCB1RXBUF;
 delay_ms(10);
    
  UCB1TXBUF=0xff;
  while(!(  UC1IFG & UCB1RXIFG));
  data1=UCB1RXBUF; 

  UCB1TXBUF=0xff;
  while(!(  UC1IFG & UCB1RXIFG));
  data2=UCB1RXBUF; //Mid-Byte

  UCB1TXBUF=0xff;
  while(!(  UC1IFG & UCB1RXIFG));
  data3=UCB1RXBUF; //LSB
  
  dato = ((long)data1<<16)+((long)data2<<8)+((long)data3);
  
  ADS1248AssertCS(0); // CS goes high  
  
  return dato;
  
}

int ADS1248SendResetCommand(void)
{

  char dummy;
  
  // assert CS to start transfer
   ADS1248AssertCS(1); // CS goes low

delay_ms(60);


//  while(!(UC1IFG & UCB1TXIFG));
    UCB1TXBUF= ADS1248_CMD_RESET;
    while(!(UC1IFG & UCB1RXIFG));
    dummy=UCB1RXBUF;

   // de-assert CS
   ADS1248AssertCS(0); // CS goes high
   
  delay_ms(10);
   
   return 0;
}

/* stop collecting data */
void ADS1248Stop(void)
{
      unsigned char dummy;
      
      // Reset SPI
      ADS1248AssertCS(0); // CS goes high
      delay_ms(10);
      ADS1248AssertCS(1); // CS goes low
      delay_ms(60);
      
      // Command to stop taking continous readings
       while(P2IN & ADS1248_DRDY);
      
  //    while(!( UC1IFG & UCB1TXIFG));
              UCB1TXBUF=ADS1248_CMD_SDATAC;
      while(!( UC1IFG & UCB1RXIFG));
              dummy=UCB1RXBUF;
delay_ms(10);
 
      ADS1248AssertCS(0); // CS goes high
      
}


adc_reading(unsigned int mode)
{
long data,dummy;

switch(mode)
{
	case 1:
   data=ADS1248ReadData();
	
	if(data>=4280000)
	data=data-4280000;
	else
	data=4280000-data;
	
	data=data*100; 
	dummy=data/40000000;
	adc_msg=dummy<<8;
	
	data=data%40000000;
	dummy=data/4000000;
	adc_msg |=(dummy<<4);
	
	data=data%4000000;
	dummy=data/400000;
	adc_msg |=dummy;
	
	data=data%400000;
	dummy=data/40000;
	dpdata =dummy;
 	break;
	
	case 2:
	data=ADS1248ReadData();
	
//	if(data>=720000)
//    {
//	data=data-720000;
    
    data=data & 0xffff80;
 	dummy=data/50000;
	adc_msg=dummy<<4;
	
	data=data%50000;
	dummy=data/5000;
	adc_msg |=dummy & 0xfffff0;
	
//	data=data%100000;
//	dummy=data/10000;
//	dpdata =dummy;
//    }	
 	break;
	
//	default:
//	adc_msg=0x88;
//	dpdata=0x08;
	
	case 3:
	data=ADS1248ReadData();
  regwriteads[ADS1248_SYS0_REGISTER] = 0x20;
  
   ADS1248WriteRegister(ADS1248_SYS0_REGISTER , 1);
   delay_ms(10);
 
	if(data>=180000)
    {
	data=data-180000;
 
	dummy=data/20000;
	adc_msg=dummy<<4;
	
	data=data%250000;
	dummy=data/25000;
	adc_msg |=dummy;
	
	data=data%25000;
	dummy=data/2500;
	dpdata =dummy;
    }	
	break;
	
}
}




